# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if (head == None or head.next == None):
            return True
        
        pointer1 = head
        pointer2 = head
        prev = None

        while (pointer1 != None and pointer1.next != None): # Find half of list using runner technique
            pointer1 = pointer1.next.next
            
            prev = pointer2
            pointer2 = pointer2.next
        
        pointer1 = head
        
        while (pointer2 != None): # Reverse half of list
            pNext = pointer2.next
            pointer2.next = prev
            prev = pointer2
            pointer2 = pNext
        
        pointer2 = prev
        
        while (pointer1 != pointer2): # Palindrome check
            if (pointer1.val != pointer2.val):
                return False
            
            if (pointer1.next == pointer2):
                break
            
            pointer1 = pointer1.next
            pointer2 = pointer2.next
        
        return True
